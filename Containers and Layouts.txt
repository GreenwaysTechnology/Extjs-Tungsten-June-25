										Containers and Layouts
************************************************************************************************************************************************************
											Exjs Containers
.............................................................................................................................................................................................
üì¶ What is a Container in Ext JS?
In Ext JS, a container is a special kind of component that can hold and manage child components.
It‚Äôs like a box that organizes how its child elements (panels, buttons, fields, etc.) are displayed and behave.

Key point: All containers are components, but not all components are containers.


‚öôÔ∏è Why use Containers?
To group related components together.
To control layout and arrangement of child components.
To manage component hierarchy and nesting.


üóÇÔ∏è Common Ext JS Containers
Here are some frequently used containers:

| Container                     | Description                                                                   |
| ----------------------------- | ----------------------------------------------------------------------------- |
| **Ext.container.Container**   | Base class for all containers. Not used directly often.                       |
| **Ext.panel.Panel**           | The most common container ‚Äî provides a header, tools, body, and docked items. |
| **Ext.form.Panel**            | Specialized container for managing forms and fields.                          |
| **Ext.tab.Panel**             | Container with tabbed navigation.                                             |
| **Ext.window.Window**        | Floating, draggable container ‚Äî behaves like a dialog or popup.               |
| **Ext.container.Viewport**    | Special top-level container that fills the entire browser window.             |
| **Ext.container.ButtonGroup** | Groups buttons together in a panel.                                           |
| **Ext.toolbar.Toolbar**       | Container for arranging buttons and controls horizontally or vertically.      |

Layout:
   Design a page , How to organize the elements in order.

Layouts are organized in web using css.

Common Term:
box:
  In Any UI, box represents UI element.
 Every UI element is box eg: div,button,TextBox
 Since Every UI is box, which common properties

Layout common css properties:

1.width
2.height
space Allocation
 3.margin
   space is allocated outside the box
   Top,right,bottom,left - eg: marginTop:10px
 4.padding
    space is allocated inside the box
 Top,right,bottom,left - eg: marginPadding:10px

CSS layout patterns:
1.fixed width layout
   layout is based on screen fixed width -  legacy way of designing web pages . Before 2007
   float,position

2.Responsive layout .After 2007
     Based on screen resolution, width is automatically set (either increased or decreased)
     width is mentioned in % ,eg 100%

3. grid layout
    Based on responsive layout but you dont need to calculate values for page.
   going to represent your page as "column and row"

4.flexbox
   Based on grid layout, but ui designed based on either column or row.

Layouts in Ext.js:
...........................
üìê How do Containers control Layout?
Each container uses a layout manager to arrange its children.
Some common layouts are:

| Layout          | Description                                                       |
| --------------- | ----------------------------------------------------------------- |
| **fit**         | One child fills the entire container.                             |
| **hbox / vbox** | Children arranged horizontally or vertically.                     |
| **border**      | Splits container into regions (north, south, east, west, center). |
| **card**        | One child visible at a time (like a wizard or tab view).          |
| **column**      | Children arranged in columns with proportional widths.            |
| **anchor**      | Children sized relative to container size.                        |
| **absolute**    | Children positioned with x/y coordinates.                         |


..........................................................................................................................................................................................
								Panel
.........................................................................................................................................................................................

üóÇÔ∏è What is Ext.panel.Panel?
‚úÖ Panel is a versatile container that can hold other components and provides:

a header (with title, tools, icons)

a body (where content or child components live)

optional toolbar(s) (top, bottom, left, or right)

collapsible, resizable, closable, and more.

It‚Äôs used for grouping content in a structured box with optional framing.

‚öôÔ∏è Key Features

| Feature                   | Purpose                                  |
| ------------------------- | ---------------------------------------- |
| **title**                 | Shows a header with text.                |
| **html**                  | Set static HTML content in the body.     |
| **items**                 | Add child components.                    |
| **tools**                 | Add icons like collapse, gear, close.    |
| **tbar/bbar/dockedItems** | Add toolbars or buttons docked to edges. |
| **collapsible**           | Allow user to collapse/expand the panel. |
| **layout**                | Manage layout of child components.       |

Eg: Basic Properties , Height and width:
....................................................................

Default width:
  is calculated according screen width or parent width
Default height:
  It is calculated according to content height

Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.panel.Panel', {
            title: 'Panel with TextBox and Button',
            width: 600,
            height:500,
            html:'<h1>This is simple Panel with Height and width</h1>',
            renderTo: Ext.getBody() //View Port
        })

    }
})
********************************************************************************************************************************************************
								
Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.panel.Panel', {
            title: 'Panel with TextBox and Button',
            width: 50,
           // margin: 100, // top,right,bottom,left
            margin:'10 20 30 50',
            height: 500,
            html: `
            
                <h1>This is simple Panel with Height and width</h1>
            <h1>This is simple Panel with Height and width</h1>
            <h1>This is simple Panel with Height and width</h1><h1>This is simple Panel with Height and width</h1><h1>This is simple Panel with Height and width</h1><h1>This is simple Panel with Height and width</h1>
            
            `,
            renderTo: Ext.getBody() //View Port
        })

    }
})
**********************************************************************************************************************************************************
										
Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.panel.Panel', {
            title: 'Panel with More Configuration',
            width: 500,
            margin: '10 20 30 50',
            height: 500,
            collapsible: true,
            collapsed: true,
            //toolbar
            tbar: [
                {
                    text: 'Add',
                    handler: function () {
                        Ext.Msg.alert('Add', 'Add Button is clicked')
                    }
                },
                '->',

                {
                    text: 'Delete',
                }
            ],
            bbar: [{
                text: 'Save'
            },
                '->',
            {
                text: 'Cancel'
            }
            ],
            tools: [
                {
                    type: 'help',
                    handler: function () {
                        Ext.Msg.alert('Help')
                    }
                }
            ],
            buttons: [{
                text: 'MyButton'
            }],

            renderTo: Ext.getBody() //View Port
        })

    }
})
***********************************************************************************************************************************************************
												Layouts

What are Layouts?
Layouts control how child components are sized and positioned inside a container.
Each container has one layout at a time, but can have multiple child components.

Every container has a layout that manages the sizing and positioning of its child Components. 

vbox and hbox:
  Both layout types are used to arrange child components vertically(vbox) or horizontally(hbox).
 This layout belong to the Box layout family, which gives control over sizing, alignment, and spacing

vbox:
 Arranges items top to bottom.

layout: 'vbox'
or
layout: {
  type:'vbox'
  align:'strech' //make children stretch to container width
}


Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.panel.Panel', {
            title: 'Panel with More Configuration',
            width: 500,
            margin: '10 20 30 50',
            height: 500,
            collapsible: true,
            collapsed: false,
            bodyPadding:10,
            layout: {
                type: 'vbox',
                align:'stretch'
            },
            items: [
                {
                    xtype: 'panel',
                    title: 'Top Panel',
                    html: '1st panel'
                },
                {
                    xtype: 'panel',
                    title: 'Bottom Panel',
                    html: '2st panel'
                }
            ],
            renderTo: Ext.getBody() //View Port
        })

    }
})
type: 'hbox'
This sets the layout type to Horizontal Box Layout.

It arranges child items in a single row, from left to right

align: 'stretch'
This is an alignment option for hbox.

It makes all child items expand vertically to fill the height of the container.

hbox options:

Option		Meaning
align: 'top'	Items align to the top of the container (default).
align: 'middle'	Items align vertically centered.
align: 'stretch'	Items stretch to fill the container's height.
align: 'stretchmax'	All items get the height of the tallest item.

What is flex?
flex is a proportional sizing property.

It works like CSS flex-grow.

It determines how much space an item should take relative to its siblings within an hbox or vbox layout.

It only applies to the main axis:

In hbox: width

In vbox: height

üìê How does it work?
Child items without flex use their fixed width or height.

Child items with flex share the remaining space proportionally.


..................................................................................................................................................................................................................................
											hbox
				

Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.panel.Panel', {
            title: 'Panel with More Configuration',
            // width: 500,
            margin: '10 20 30 50',
            height: 500,
            collapsible: true,
            collapsed: false,
            bodyPadding: 10,
            layout: {
                type: 'hbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'panel',
                    title: 'Top Panel',
                    flex: 2,
                    html: '1st panel'
                },
                {
                    xtype: 'panel',
                    title: 'Bottom Panel',
                    margin: '2 2 2 2',
                    bodyPadding: 5,
                    flex: 3,
                    html: '2st panel'
                },
                {
                    xtype: 'panel',
                    title: 'Bottom Panel',
                    margin: '2 2 2 2',
                    bodyPadding: 5,
                    flex: 3,
                    html: '2st panel'
                },
                {
                    xtype: 'panel',
                    title: 'Bottom Panel',
                    margin: '2 2 2 2',
                    bodyPadding: 5,
                    flex: 3,
                    html: '2st panel'
                }
            ],
            renderTo: Ext.getBody() //View Port
        })

    }
})
 Result:
   {
            xtype: 'panel',
            title: 'Panel 1',
            flex: 1 // gets 1 part
        },
        {
            xtype: 'panel',
            title: 'Panel 2',
            flex: 2 // gets 2 parts
        }

Both panels fill the height (because of align: 'stretch').

Total available width is divided into 3 parts.

Panel 1 gets 1 part.

Panel 2 gets 2 parts.

So: Panel 1 = ~33% width, Panel 2 = ~67% width.

Without flex
If you remove flex:

items: [
    { xtype: 'panel', title: 'Panel 1', width: 100 },
    { xtype: 'panel', title: 'Panel 2', width: 200 }
]
‚úÖ Then widths are fixed ‚Äî not proportional.

In summary
flex = proportional sizing within a box layout.

Used mostly in hbox (horizontal) and vbox (vertical).

Allows flexible, fluid UIs without pixel-perfect sizes.
***********************************************************************************************************************************************************
   										Border
**********************************************************************************************************************************************************
Border layout is powerfull container layout that allows you to organize child elements into five regions.
What‚Äôs happening
Region	Purpose	         Layout
north	Header	         Fixed height
west   	Navigation       Fixed width, collapsible
center	Main content	 Nested vbox and hbox
south	Footer	          Fixed height

Nested layouts in center:
vbox: top toolbar + main area

hbox: splits main area into left/right sub panels with flex

‚úÖ Key concepts used
‚úîÔ∏è Viewport ‚Äî root container, fills the browser.
‚úîÔ∏è border layout ‚Äî classic for dashboards.
‚úîÔ∏è vbox + hbox + flex ‚Äî for nested, fluid content arrangement.
‚úîÔ∏è collapsible + split ‚Äî make nav panel resizable and hideable.


This pattern is commonly used for:

Admin dashboards
Data-heavy portals
Split-pane apps

eg;

Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.container.Viewport', {
            layout: 'border',
            items: [{
                //Header
                region: 'north',
                xtype: 'panel',
                title: 'Application Header',
                height: 60,
                bodyPadding: 10
            },
            {
                //NavBar
                region: 'west',
                xtype: 'panel',
                title: 'Navigation',
                width: 200,
                collapsible: true,
                split: true,
                bodyPadding: 10
            },
            //Main Content
            {
                region: 'center',
                xtype: 'container', //Ext.container.Container
                flex: 1, // takes the whole space 
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                },
                items: [
                    {
                        xtype: 'panel',
                        title: 'Left Sub Panel',
                        flex: 1,
                        margin: '5'
                    },
                    {
                        xtype: 'panel',
                        title: 'Right Sub Panel',
                        flex: 2,
                        margin: '5'
                    }],

            },
            {
                region: 'south',
                xtype: 'panel',
                title: 'Application Footer',
                height: 40,
                bodyPadding: 5
            }

            ],
            // SOUTH: Footer
        })
    },


})
********************************************************************************************************************************************************
.........................................................................................................................................................................................
								fit layout
........................................................................................................................................................................................

 What is fit layout?
The fit layout is one of the simplest layouts in Ext JS.

üëâ It makes exactly one child component expand to fill the entire container ‚Äî both width and height.

If there‚Äôs more than one child, only the first one is displayed.

It‚Äôs often used to embed a single main panel, like a grid, form, or tab panel.

üìå When to use fit

| Use case                                           | Why                         |
| -------------------------------------------------- | --------------------------- |
| Show a single component that fills the parent      | e.g., grid, form, tab panel |
| Use it in the `center` region of a `border` layout | Common for content area     |
| Wrap a panel around an iframe or custom content    | So it always fills          |

Use Case : one Child inside fit layout

Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.container.Container', {
            renderTo: Ext.getBody(),
            layout: 'fit',
            items: [
                {
                    xtype: 'panel',
                    title: 'I fill the whole Container',
                    html: '<p>This is Fit Layout</p>'
                }
            ]
        })

    }


})
The panel expands to fill all 400x300 pixels.
No scroll bars unless the panel content overflows.


Use 2: Fit inside border layout:

Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.container.Viewport', {
            layout: 'border',
            items: [
                {
                    region: 'north',
                    xtype: 'panel',
                    title: 'Header',
                    height: 50
                },
                {
                    region: 'center',
                    xtype: 'panel',
                    title: 'Main Content',
                    layout: 'fit',
                    items: [
                        {
                            xtype: 'tabpanel',
                            items: [
                                { title: 'Tab 1', html: 'Content 1' },
                                { title: 'Tab 2', html: 'Content 2' }
                            ]
                        }
                    ]
                }
            ]
        });

    }


})
The center panel uses fit layout.
Inside it, the tabpanel always fills all available space

Use 3‚Äî What happens with multiple children?



Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.container.Container',{
            layout: 'fit',
            renderTo:Ext.getBody(),
            width: 400,
            height: 300,
            items: [
                {
                    xtype: 'panel',
                    title: 'First Panel',
                    html: 'I am visible'
                },
                {
                    xtype: 'panel',
                    title: 'Second Panel',
                    html: 'I am ignored!'
                }

            ]
        })

    }

})
‚úîÔ∏è Only the first child is visible and stretched.
‚úîÔ∏è Any extra children are ignored by the fit layout.

‚úÖ Key Points
‚úÖ	Explanation
fit = one child expands to fill container	
More than one child? Only the first is shown	
Perfect for single grids, tabs, or embedded forms	
Frequently used in the center region

 Analogy
Think of fit as ‚Äú100% width + 100% height‚Äù for one child.

fit layout = easiest way to make a child component auto-resize with its parent container.

But in the output, still second panel is visible why?
You‚Äôre absolutely right:
In Ext JS, if you define multiple items in a container with layout: 'fit', technically all items exist, but only the first one is managed by the fit layout (which means only the first one will be resized to fit).

However:
üëâ By default, Ext JS does NOT hide the other panels automatically.
So, if the extra panels don‚Äôt have hidden: true or activeItem logic, they may overlap or show up unexpectedly.

 How Ext handles it
fit means: "stretch one child to fill the container."

Other children aren‚Äôt laid out or resized, but they can still render unless you hide them yourself.

Common best practice: use only one child in fit ‚Äî or use a layout that supports multiple children properly (like card, vbox, or hbox).


 How to ensure only the first is shown
‚úîÔ∏è Solution 1 ‚Äî Use hidden: true for others

Ext.create('Ext.container.Container', {
    renderTo: Ext.getBody(),
    width: 400,
    height: 200,
    layout: 'fit',
    items: [
        {
            xtype: 'panel',
            title: 'First Panel',
            html: 'I am visible'
        },
        {
            xtype: 'panel',
            title: 'Second Panel',
            html: 'I should be hidden!',
            hidden: true // hide it manually
        }
    ]
});
************************************************************************************************************************************************************
											...........................................................................................................................................................................................
									Card Layout
........................................................................................................................................................................................
What is card layout?
card layout is used to manage multiple child components but show only one at a time.

It‚Äôs like a stack of cards ‚Äî only the top card is visible.

Common uses:

Wizards (Step 1 ‚Üí Step 2)

Multi-page forms

Custom tab switching

‚úÖ Key features

| Feature                                                   | Description |
| --------------------------------------------------------- | ----------- |
| Only **one child is visible** at a time                   |             |
| You control which child is active using `setActiveItem()` |             |
| Internally used by `tabpanel` and `window` wizards        |             |

		
Note:
In Ext JS, bbar (bottom toolbar) is automatically available only for Panel components, not for a generic Container.



Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.panel.Panel', {
            layout: 'card',
            renderTo: Ext.getBody(),
            width: 400,
            height: 300,
            itemId: 'cardContainer',
            items: [
                {
                    xtype: 'panel',
                    title: 'Card 1',
                    html: '<h2>Welcome to Card 1</h2>'
                },
                {
                    xtype: 'panel',
                    title: 'Card 2',
                    html: '<h2>Now you are on Card 2</h2>'
                },
                {
                    xtype: 'panel',
                    title: 'Card 3',
                    html: '<h2>Finally, Card 3</h2>'
                }
            ],
            bbar: [
                {
                    text: 'Card-1',
                    handler: function (btn) {
                        var container = btn.up('container#cardContainer')
                        container.getLayout().setActiveItem(0)
                    }
                },
                {
                    text: 'Card-2',
                    handler: function (btn) {
                        var container = btn.up('container#cardContainer')
                        container.getLayout().setActiveItem(1)
                    }
                },
                {
                    text: 'Card-3',
                    handler: function (btn) {
                        var container = btn.up('container#cardContainer')
                        container.getLayout().setActiveItem(2)
                    }
                }
            ]
        })

    }


})
‚úÖ Key features
Only one child is visible at a time	
You control which child is active using setActiveItem()	
Internally used by tabpanel and window wizards	

‚úÖ How this works
‚úîÔ∏è layout: 'card' means all children stacked, but only one is shown.
‚úîÔ∏è The bbar (bottom toolbar) has buttons to switch cards by index (0, 1, 2).
‚úîÔ∏è setActiveItem(index) does the switching.

Another version ‚Äî with Next/Previous buttons:
...........................................................................

Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.panel.Panel', {
            renderTo: Ext.getBody(),
            width: 400,
            height: 200,
            layout: 'card',
            itemId: 'wizardContainer',
            items: [
                { html: '<h2>Step 1: Introduction</h2>' },
                { html: '<h2>Step 2: Details</h2>' },
                { html: '<h2>Step 3: Confirmation</h2>' }
            ],

            bbar: [
                {
                    text: 'Previous',
                    handler: function (btn) {
                        var container = btn.up('container#wizardContainer'),
                            layout = container.getLayout(),
                            currentIndex = layout.getActiveItem().getItemId() || layout.activeItemIndex || 0;

                        // fallback if itemId is not set:
                        var prevIndex = layout.activeItemIndex !== undefined ? layout.activeItemIndex - 1 : layout.getNext().index - 1;
                        if (prevIndex >= 0) {
                            layout.setActiveItem(prevIndex);
                            layout.activeItemIndex = prevIndex;
                        }
                    }
                },
                '->',
                {
                    text: 'Next',
                    handler: function (btn) {
                        var container = btn.up('container#wizardContainer'),
                            layout = container.getLayout(),
                            currentIndex = layout.activeItemIndex || 0;
                        var nextIndex = currentIndex + 1;

                        if (nextIndex < container.items.length) {
                            layout.setActiveItem(nextIndex);
                            layout.activeItemIndex = nextIndex;
                        }
                    }
                }
            ],

            listeners: {
                afterrender: function (container) {
                    // Track index manually for convenience
                    container.getLayout().activeItemIndex = 0;
                }
            }
        });

    }


})
‚úÖ Key difference from fit
| `fit`                                      |			 `card`                                           |
| ------------------------------------ | ------------------------------------------------ |
| One child fills container            | Many children stacked, only one visible          |
| Other children not hidden by default | Only active card visible, others auto hidden     |
| Use for a single panel               | Use for wizards, multi-step forms, tab switching |
************************************************************************************************************************************************************
.................................................************......................................................................................................................
								accordion
......................................................................................................................................................................................

‚úÖ What is accordion layout?

1.The accordion layout stacks multiple panels vertically.
2.Only one panel is expanded at a time (like an accordion).
3.When you expand a new panel, the others collapse automatically.
4.Common for sidebars, settings menus, navigation panels.
   

‚úÖ	Explanation
Children must be Panels	
Only one child expanded at a time	
Automatically manages expand/collapse	
Usually used inside a Panel with layout: 'accordion'

Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.panel.Panel', {
            renderTo: Ext.getBody(),
            title: 'Accordion Example',
            width: 300,
            height: 400,
            layout: 'accordion',
            defaults: {
                bodyPadding: 10
            },
            items: [
                {
                    title: 'Panel 1',
                    html: 'Content for Panel 1'
                },
                {
                    title: 'Panel 2',
                    html: 'Content for Panel 2'
                },
                {
                    title: 'Panel 3',
                    html: 'Content for Panel 3'
                }
            ]
        });
    }
});


‚úÖ How it works
‚úîÔ∏è The container (Panel) uses layout: 'accordion'.
‚úîÔ∏è Each child must be a Panel with a title.
‚úîÔ∏è Only one child stays open ‚Äî click another header to switch.


‚úÖ Common options
animate: true or false ‚Äî smooth expand/collapse.
activeItem: sets which panel is open by default.
multi: (not in classic accordion, but can be mimicked) ‚Äî allow multiple panels open.

‚úÖ Analogy
accordion = a vertical stack of collapsible panels.

| `card`                                          		   | `accordion`                              |
| -------------------------------------------------- | ---------------------------------------- |
| Only **one child visible**, fills entire container | One child **expanded**, others collapsed |
| No multiple visible children                       | All headers always visible               |
| Used for wizards, tabs                             | Used for menus, sidebars                 |
.............................................**************........................................................................................................................
									Column Layout
.....................................................................................................................................................................................

What is column layout?

Column layout divides a container horizontally into columns.
Each child item can take a percentage width using columnWidth (a value between 0 and 1).
Good for arranging form fields, info panels, or multi-column UIs.
Key Ideas:
| ‚úÖ                                                                                                      | Explanation |
| ------------------------------------------------------------------------------------------------------ | ----------- |
| Children are laid out **left to right**, each given a percentage width                                 |             |
| The total `columnWidth` for all children does not have to add up to exactly `1` ‚Äî Ext JS normalizes it |             |
| Each child is typically a `Panel` or `FieldContainer`                                                  |             |
| Height is **not auto-matched** ‚Äî each child controls its own height                                    |             |


The real cause
In Ext JS, the column layout uses CSS float: left for each child ‚Äî so when you use bodyPadding on the parent Panel, the inner width is reduced by the padding, but your children still ask for 50% each of the full available width (not the padded area).

So:

Actual available width = width - bodyPadding * 2

Each child claims 50% of width instead of width minus padding

So the last column doesn‚Äôt fit ‚Üí it wraps or is clipped.

option 2 ‚Äî Use hbox instead
hbox handles padding and spacing properly ‚Äî this is generally preferred for modern layouts.

Option 3 ‚Äî Adjust for padding
If you must use column + bodyPadding:

Use columnWidth slightly under 0.5 (like 0.48).

Or use explicit width in pixels.

Or use defaults: { style: { marginRight: '10px' } } instead of bodyPadding.


üìå Key takeaway
‚úÖ Good				‚ùå Fragile
hbox with flex		column with bodyPadding

üëâ column layout is older and can break with padding/margins ‚Äî hbox is smarter for side-by-side panels.

column layout works best with no inner padding.

hbox works perfectly with bodyPadding.

For modern layouts ‚Üí prefer hbox.
********************************************************************************************************************************************************
								Anchor layout
....................................................................................................................................................................................

What is anchor layout?
anchor layout is mainly used for forms and simple panels.

It sizes and positions child items relative to the container‚Äôs size.

Each child can use an anchor value:

'100%' ‚Üí 100% of container width

'50%' ‚Üí 50% of container width

'100% 50%' ‚Üí 100% width & 50% height

Or pixel offsets like '-20' (20px less than container)

When to use
Common in forms: to make input fields automatically expand to container width.

Simple containers that need children to stretch horizontally.

How it works?

| ‚úÖ                                                               | Explanation |
| --------------------------------------------------------------- | ----------- |
| `layout: 'anchor'` tells the container to use anchor sizing     |             |
| Each child‚Äôs `anchor` determines its size relative to container |             |
| `'100%'` means full width                                       |             |
| `'50%'` means half width                                        |             |
| `'100% 50%'` means full width, half height                      |             |

‚úÖ Tips
‚úîÔ∏è anchor works great for forms ‚Äî your fields auto-resize with the window.
‚úîÔ∏è For more complex responsive layouts, hbox + vbox are better.
‚úîÔ∏è Combine anchor + form layout for beautiful auto-sizing forms.

 Use anchor layout when:
‚úîÔ∏è You want children to scale with the container
‚úîÔ∏è You build forms with fields that need 100% width
‚úîÔ∏è You want simple relative sizing

Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.panel.Panel', {
            renderTo: Ext.getBody(),
            title: 'Anchor Layout Example',
            width: 400,
            height: 300,
            layout: 'anchor',
            bodyPadding: 10,
            items: [
                {
                    xtype: 'textfield',
                    fieldLabel: 'Name',
                    anchor: '100%'   // takes 100% width of container
                },
                {
                    xtype: 'textfield',
                    fieldLabel: 'Email',
                    anchor: '100%'   // also 100% width
                },
                {
                    xtype: 'textarea',
                    fieldLabel: 'Address',
                    anchor: '100% 50%'  // 100% width, 50% height of container
                }
            ]
        });

    }
})
								Table Layout

‚úÖ What is table layout?
It lays out child items in rows and columns, just like an HTML <table>.

Each child item is placed into the next available cell.

You can control how many columns there are and how wide/high each cell should be.

Items can span multiple rows or columns using rowspan and colspan.

‚úÖ When to use it
When you need a simple grid arrangement: e.g. forms, dashboards, or control panels.

To position items precisely in a matrix-like layout.

Good alternative to writing raw HTML tables in your markup.

‚úÖ Key config

| Config                                  | What it does                                  |
| --------------------------------------- | --------------------------------------------- |
| `layout: { type: 'table', columns: N }` | Defines a table with `N` columns              |
| `rowspan` / `colspan` on child items    | Makes an item span multiple rows or columns   |
| `cellCls`                               | CSS class for styling table cells             |
| `tdAttrs`                               | Custom HTML attributes for the `<td>` element |


Ext.application({
    name: 'MyApp', //name of the application : this is namespace prefix
    launch: function () {
        Ext.create('Ext.panel.Panel', {
            renderTo: Ext.getBody(),
            title: 'Table Layout Example',
            width: 400,
            height: 200,
            layout: {
                type: 'table',
                columns:3
            },
            defaults: {
                bodyPadding: 10,
                border: 1,
                style: 'background: #f0f0f0;'
            },
            items: [
                {
                    html: 'Cell 1'
                },
                {
                    html: 'Cell 2'
                },
                {
                    html: 'Cell 3'
                },
                {
                    html: 'Cell 4'
                }
            ]
        });


    }
})
************************************************************************************************************************************************************
