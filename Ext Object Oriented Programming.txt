								Ext Object Oriented Programming concepts and implementation
*************************************************************************************************************************************************************

Ext js is framework which is exposed as "Ext" namespace
.
What is a Namespace in Ext JS?

   A namespace in Ext JS is just a way to organize your classes in a hierarchical, unique structure â€” using dot-separated names like 
MyApp.view.Main or MyApp.model.Person.

The Ext namespace is entry point in Ext.js applications.

How to begin ext code?
function App() {
    //print ext version
  console.log(Ext.versions.ext.version)
}
App()
Ext.versions.ext.version
 |
Namespace
All ext code begins with "Ext" Namespace.
.........................................................................................................................................................................................................................................
								
OO Concepts:

1. how to declare classes
2.How to create objects/instances
3.How to add properties and methods into class
4.Static properties
5.Inheritance
6.Mixin

Declare Classes 

Ext.define('className',{
  //class instance variables and methods,constructors
})
//Define class
var HelloWorld = Ext.define('HelloWorld', {
    
})

Create Object/instance

function App() {
    var h = new HelloWorld()
    console.log(h)
}
App()

Object creation:
  There are two ways to create Object for a class

1.JS style
   var h = new HelloWorld()
    console.log(h)
2.Ext style

   //Ext way
   var h1= Ext.create('HelloWorld')
   console.log(h1)
******************************************************************************************************************************************************
									Properties 
.******************************************************************************************************************************************************
ðŸ“Œ What are Properties in Ext JS?

In an Ext JS class, you can define properties in 3 main ways:

Instance Properties => Belong to each object instance
Config Properties =>    Declared in config block â†’ auto getter/setter
Static Properties =>     Shared by all instances (like a class constant)


instance Properties:

Syntax:
Ext.define('MyApp.Car', {
    color: 'red', // Instance property
});
var myCar = Ext.create('MyApp.Car');
console.log(myCar.color); // red

eg:
//instance members
Ext.define('Person', {
    id: 1,
    name: 'Subrmanian Murugan',
    email: 'sasubramanan_md@hotmail.com',
    status: true,
    address: {
        city: 'Coimbatore'
    },
    skills: [
        'java', 'javascript'
    ]

})
function App() {
    var person = Ext.create('Person')
    console.log(`Id : ${person.id}`)
    console.log(`Name : ${person.name}`)
    console.log(`status : ${person.status}`)
    console.log(`Id : ${person.address.city}`)
    console.log(`Skills : ${person.skills}`)
}
App()
........................................................................................................................................................................................................................................
										 instance variable initialization

1.inside class with hard coded values
Ext.define('Person', {
    id: 1,
    name: 'Subrmanian Murugan',
    email: 'sasubramanan_md@hotmail.com',
    status: true,
    address: {
        city: 'Coimbatore'
    },
    skills: [
        'java', 'javascript'
    ]

})
2.After object creation, you can reinitialize the values
//instance members
Ext.define('Person', {
    id: 1,
    name: 'Subrmanian Murugan',
    email: 'sasubramanan_md@hotmail.com',
    status: true,
    address: {
        city: 'Coimbatore'
    },
    skills: [
        'java', 'javascript'
    ]

})
function App() {
    var person = Ext.create('Person')
    console.log(`Id : ${person.id}`)
    console.log(`Name : ${person.name}`)
    console.log(`status : ${person.status}`)
    console.log(`Id : ${person.address.city}`)
    console.log(`Skills : ${person.skills}`)

    //reinitalize with different data
    person.id = 2
    person.name = 'Murugan P'
    person.status = true
    person.address = {
        city: 'Chennai'
    }
    person.skills = [
        "Data Science", "ML"
    ]

    console.log(`Id : ${person.id}`)
    console.log(`Name : ${person.name}`)
    console.log(`status : ${person.status}`)
    console.log(`Id : ${person.address.city}`)
    console.log(`Skills : ${person.skills}`)

}
App()
*********************************************************************************************************************************************************
										Constructors 
********************************************************************************************************************************************************
Constructors are special function which gets called during object creation

Syntax:
Ext.define('className',{
   instanceVariable:defaultvalue,
   constructor:function(a1,a2,a3){
	this.instanceVariable=a1
   }
})

//instance members
Ext.define('Person', {
    id: 0,
    name: '',
    email: '',
    status: false,
    address: {
        city: ''
    },
    skills: [],
    constructor: function (id, name, email, status, address, skills) {
        this.id = id
        this.name = name
        this.email = email
        this.status = status
        this.address = address
        this.skills = skills
    }

})
function App() {
    var person = Ext.create('Person', 1, 'Subramanian', 'subu@gmail.com',
        true, { city: 'Coimbatore' }, ['java', 'js'])
    console.log(`Id : ${person.id}`)
    console.log(`Name : ${person.name}`)
    console.log(`status : ${person.status}`)
    console.log(`Id : ${person.address.city}`)
    console.log(`Skills : ${person.skills}`)
}
App()
*********************************************************************************************************************************************************
									  Methods Declaration
*****************************************************************************************************************************************************
//instance members
Ext.define('Greeting', {
    message: ''',
    constructor: function (message='Welcome') {
        this.message = message
    },
    sayHello: function (name='John') {
        return `${this.message} ${name}`
    }
})
function App() {
    var greet = Ext.create('Greeting', 'Hello')
    console.log(greet.sayHello('Subramanian'))
}
App()
************************************************************************************************************************************************************
											Config Properties
**********************************************************************************************************************************************************
Configuration:
   There is also a dedicated config property that gets processed by the powerful Ext.Class pre-processors before the class is created.

1.Configurations are completely encapsulated from other class members
2.Getter and setter methods for every config property are automatically generated into the class prototype during class creation 
 if methods are not already defined.
		
 config block automatically creates:

1.Getter: getBrand()
2.Setter: setBrand()
3.Apply method (optional: applyBrand for custom processing)
4.Update method (optional: updateBrand for reacting to changes)


âœ… initConfig(config) sets initial values.
âœ… You interact with configs via generated getters/setters â€” not direct property access.

Use case: Declare default properties and initialize and read
//config
Ext.define("Person", {
    config: {
        id: 0,
        name: 'Subramanian',
        email: 'subu@gmail.com',
        status: false,
        address: {
            city: 'Coimbatore'
        },
        skills: ['Java', 'JS']
    },
    constructor: function (config) {
        //set inital value
        this.initConfig(config)
    }
})

function App() {
    var person = Ext.create('Person')
    console.log(person)
    console.log(`Id : ${person.getId()}`)
    console.log(`Name : ${person.getName()}`)
    console.log(`status : ${person.getStatus()}`)
    console.log(`Id : ${person.getAddress().city}`)
    console.log(`Skills : ${person.getSkills()}`)

}
App()
********************************************************************************************************************************************************
								   Setting Config Properties

1.via setter methods , after object creation
2.via constructor


Eg: via setters
//config
Ext.define("Person", {
    config: {
        id: 0,
        name: 'Subramanian',
        email: 'subu@gmail.com',
        status: false,
        address: {
            city: 'Coimbatore'
        },
        skills: ['Java', 'JS']
    },
    constructor: function (config) {
        //set inital value
        this.initConfig(config)
    }
})

function App() {
    var person = Ext.create('Person')
    console.log(person)
    console.log(`Id : ${person.getId()}`)
    console.log(`Name : ${person.getName()}`)
    console.log(`status : ${person.getStatus()}`)
    console.log(`Id : ${person.getAddress().city}`)
    console.log(`Skills : ${person.getSkills()}`)

    //new properties
    person.setId(10)
    person.setName('Ram')
    console.log(`Id : ${person.getId()}`)
    console.log(`Name : ${person.getName()}`)

}
App()


Constructors:
....................
//config
Ext.define("Person", {
    config: {
        id: 0,
        name: '',
        email: '',
        status: false,
        address: {
            city: ''
        },
        skills: []
    },
    constructor: function (config) {
        //set inital value
        this.initConfig(config)
    }
})

function App() {
    var person = Ext.create('Person', {
        id: 1,
        name: 'Subramanian M',
        status: true,
        address: {
            city: 'Coimbatore'
        },
        skills: ['js', 'java']
    })
    console.log(person)
    console.log(`Id : ${person.getId()}`)
    console.log(`Name : ${person.getName()}`)
    console.log(`status : ${person.getStatus()}`)
    console.log(`Id : ${person.getAddress().city}`)
    console.log(`Skills : ${person.getSkills()}`)
}
App()
*********************************************************************************************************************************************************
										apply and update hooks
....................................................................................................................................................................................................................................
âœ… What are apply and update hooks?
	When you define a config property in Ext JS, you can add special methods to control how the value is set and what happens after itâ€™s set:

               Hook      				 |                  Purpose                                               

apply -->		 Runs **before** setting the new value. Used to validate/modify the input.                           
update  -->      Runs **after** the value has been set. Used to react to the change (e.g., update DOM, fire events). 


Rule of thumb
1.apply modifies input.
2.update reacts to change.


syntax:
 applyPropName:function(value){
	
 }
 updatePropName:function(newValue,oldValue){

 }

apply:
//config
Ext.define("Person", {
    config: {
        id: 0,
        name: '',
        age: 18
    },
    constructor: function (config) {
        //set inital value
        this.initConfig(config)
    },
    //hooks 
    applyAge: function (value) {
        if (value < 0) {
            console.log('Age Cant be Negative setting to default Value(18)')
            return 18
        }
        return value
    }
})

function App() {
    var person = Ext.create('Person', {
        id: 1,
        name: 'Subramanian M',
        // age: -1
        age: 25
    })
    console.log(`Id : ${person.getId()}`)
    console.log(`Name : ${person.getName()}`)
    console.log(`Age : ${person.getAge()}`)

}
App()

update:
//config
Ext.define("Person", {
    config: {
        id: 0,
        name: '',
        age: 18
    },
    constructor: function (config) {
        //set inital value
        this.initConfig(config)
    },
    //hooks 
    applyAge: function (value) {
        if (value < 0) {
            console.log('Age Cant be Negative setting to default Value(18)')
            return 18
        }
        return value
    },
    updateAge: function (newAge, oldAge) {
        //you can do something with old and new values
        console.log(`Age Changed from ${oldAge} to ${newAge}`)
    }
})

function App() {
    var person = Ext.create('Person', {
        id: 1,
        name: 'Subramanian M',
        // age: -1
        age: 18
    })
    person.setAge(20)
    //set Age:
    console.log(`Id : ${person.getId()}`)
    console.log(`Name : ${person.getName()}`)
    console.log(`Age : ${person.getAge()}`)

}
App()
***********************************************************************************************************************************************************
											Inheritance
***********************************************************************************************************************************************************
JavaScript inheritance is completely different from c++ based languages
In JavaScript  inheritance is object based not class based -  Object inherits other objects
In JavaScript we have Prototype Object which is always direct parent of any object except "Object"

Ext js And Inheritance:

   In Ext JS, inheritance is done using the extend property inside Ext.define. 
   It follows classical inheritance (like Java/C#), not prototypical (like vanilla JavaScript),but internally Prototypical

Simple Inheritance:
//base class /parent class
Ext.define('Animal', {
    config: {
        name: ''
    },
    constructor: function (config) {
        this.initConfig(config)
    },
    speak: function () {
        return `${this.getName()} makes a noise`
    }

})
//child class /dervied class
Ext.define('Dog', {
    extend: 'Animal'
})


function App() {
    //create instance of Child class
    var dog = Ext.create('Dog', {
        name: 'Jacky'
    })
    console.log(dog.getName())
    console.log(dog.speak())
}
App()

How It Works 

1.extend: Specifies the superclass.
2.config: Automatically gives you getName() and setName() methods.
3.constructor: Initializes config using initConfig(config).

How to override method?
//base class /parent class
Ext.define('Animal', {
    config: {
        name: ''
    },
    constructor: function (config) {
        this.initConfig(config)
    },
    speak: function () {
        return `${this.getName()} makes a noise`
    }

})
//child class /dervied class
Ext.define('Dog', {
    extend: 'Animal',
    speak: function () {
        return `${this.getName()} says woof!`
    }
})


function App() {
    //create instance of Child class
    var dog = Ext.create('Dog', {
        name: 'Jacky'
    })
    console.log(dog.getName())
    console.log(dog.speak())
}
App()
***********************************************************************************************************************************************************
 										How to call super class Methods from derived class
*********************************************************************************************************************************************************
Ext provides a built in function called "callParent"

//base class /parent class
Ext.define('Animal', {
    config: {
        name: ''
    },
    constructor: function (config) {
        this.initConfig(config)
    },
    speak: function () {
        return `${this.getName()} makes a noise`
    }

})
//child class /dervied class
Ext.define('Dog', {
    extend: 'Animal',
    speak: function () {
        //calling parent class method
        var parentResult = this.callParent()
        console.log(`From Parent ${parentResult}`)
        return `${this.getName()} says woof!`
    }
})


function App() {
    //create instance of Child class
    var dog = Ext.create('Dog', {
        name: 'Jacky'
    })
    console.log(dog.speak())
}
App()
**********************************************************************************************************************************************************
***********************************************************************************************************************************************************
								Multi Level Inheritance
.....................................................................................................................................................................................
	In Ext JS, multiple-level (multi-tier) inheritance is fully supported using the extend keyword. Each class can extend another, forming a chain of inheritance.

//base class /parent class
Ext.define('Animal', {
    config: {
        name: ''
    },
    constructor: function (config) {
        this.initConfig(config)
    },
    speak: function () {
        return `${this.getName()} makes a noise`
    }

})
Ext.define('Mammal', {
    extend: 'Animal',
    //methods 
    speak: function () {
        var base = this.callParent()
        console.log('From Mammal :', base)
        return this.getName() + ' is mammal and  makes a sound'
    }
})
//child class /dervied class
Ext.define('Dog', {
    extend: 'Mammal',
    speak: function () {
        //calling parent class method
        var parentResult = this.callParent()
        console.log(`From Parent ${parentResult}`)
        return `${this.getName()} says woof!`
    }
})


function App() {
    //create instance of Child class
    var dog = Ext.create('Dog', {
        name: 'Jacky'
    })
    console.log(dog.speak())
}
App()
***********************************************************************************************************************************************************
							Passing Parameters to parent Class method
.....................................................................................................................................................................................................................................
this.callParent(arguments)  in Ext JS, which allows a subclass method to call its parent class method â€” just like super() in other OOP languages.

Use Case: this.callParent(arguments) in Multi-Level Inheritance

arguments:
  It is keyword in java script.
 which indicates variable args

eg: 

  function doStuff(a,b){

 }
 doStuff(10)
 doStuff(10,20)

incase there is dynamic args meaning that i dont know how many args i pass. then how to define args variable

  function doStuff(arguments){

 }
 doStuff(10)
 doStuff(10,20)
 doStuff(10,20,30,212,89)

//base class
Ext.define('Calculator', {
    multiply: function (a, b) {
        console.log(`a ${a} b ${b}`)
        return a * b;
    }
});
Ext.define('SmartCalculator', {
    extend: 'Calculator',
    multiply: function (a, b) {
        console.log('Multiplying:', a, '*', b);
        var result = this.callParent(arguments);
        console.log('Result From Parent:', result);
        return result * 2;
    }
});

function App() {
    var calc = Ext.create('SmartCalculator');
    var output = calc.multiply(3, 4);
    console.log('Output', '3 Ã— 4 = ' + output);

}
App()
Why Use arguments?

 this.callParent(arguments);

1.You donâ€™t need to manually list a, b or any parameters.
2.Automatically passes everything received in the current method.

Useful when:
1.You override methods but donâ€™t want to break inheritance.
2.You donâ€™t know the number or order of arguments (like in base class APIs or event handlers)
***********************************************************************************************************************************************************
					    Modify Arguments Before Calling callParent(arguments)
***********************************************************************************************************************************************************
Key Idea
1.arguments is an array-like object â€” you can convert or replace it.
2.this.callParent(modifiedArgs) allows you to change how the superclass receives the values.
3.This is especially useful when wrapping or extending framework-level methods like initComponent, apply, event handlers, etc.

Use Case:
Letâ€™s say we have a base class that logs messages with logMessage(message, level), and we want a subclass to:
Force the level to 'info' if none is given.

Ext.define('Logger', {
    logMessage: function (message, level) {
        console.log(`[ ${level.toUpperCase()} ] ${message}`)
    }
})
//Child class: SmartLogger that modifies args
Ext.define('SmartLogger', {
    extend: 'Logger',
    logMessage: function (message, level) {
        if (!level) {
            level = 'info'
        }
        //modify the args
        var args = [message, level]
        this.callParent(args)

    }
})
function App() {
    var logger = Ext.create('SmartLogger')
    logger.logMessage('System Started')
    logger.logMessage('Disk Full','warning')
    
}
App()
************************************************************************************************************************************************************
									  Cloning the object Properties
								                 (Ext.apply method)
************************************************************************************************************************************************************
In javascript we have many ways to copy object properties into another object or merge properties into existing object.
Object.assign() - this is js api

Ext provides an api to do this job.

Ext.apply method									
Ext.apply() is a utility method in Ext JS used to copy properties from one object to another. Itâ€™s like Object.assign() in modern JavaScript but used more widely in Ext JS to configure or extend objects.


Syntax:

Ext.apply(target, source);

target: The object to receive new properties.

source: The object containing properties to copy.


function App() {
    var person = {
        name: 'John'
    };
    console.log('Before copy', person)
    Ext.apply(person, {
        age: 30,
        occupation: 'Engineer'
    });
    console.log('After Copy',person);
}
App()

Ext.applyIf() (Optional Alternative):
........................................................

function App() {
    var person = {
        name: 'John'
    };
    console.log('Before copy', person)
    Ext.applyIf(person, {
        name: 'Subramanian',
        age: 30,
        occupation: 'Engineer'
    });
    console.log('After Copy', person);
}
App()

| Use Case                               | Why Use It                          |
| -------------------------------------- | ----------------------------------- |
| Setting default configs in a component | Merge defaults into `this`          |
| Extending plain JS objects             | Quickly add/merge properties        |
| During class instantiation             | Configure based on passed-in values |
************************************************************************************************************************************************************
								       	Mixin
**********************************************************************************************************************************************************
In Ext JS, a mixin allows you to include reusable logic (methods, configs, etc.) into multiple classes without extending them. Think of mixins like traits or interfaces with implementation â€” enabling multiple inheritance-like behavior.

Why Use Mixins?
1.Code reuse without inheritance
2.Share behavior across unrelated classes
3.Avoid deep or rigid class hierarchies

Mixin is just class only, when you attach with other classes, you have to use "mixin" configuration.

//parent
Ext.define('MyLogger', {
    log: function (msg) {
        console.log('[LOG]: ' + msg);
    }
});

Ext.define('Person', {
    mixins: {
        logger: 'MyLogger'
    },
    name: 'Subramanian Murugan',
    constructor: function (config) {
        Ext.apply(this, config)
        this.log('Person Created  ', this.name)

    },
    sayHello: function () {
        this.log('Hello,MyName is '+ this.name)
    }
})

function App() {
    var person = Ext.create('Person', {
        age: 18,
        name: 'Subramanian M',
    })
    person.sayHello()
}
App()
*****************************************************************************************************************************************************
									Multiple Mixins
.........................................................................................................................................................................................

Ext.define('Greeter', {
    greet: function () {
        console.log('Hello from mixin!');
    }
});
Ext.define('Validator', {
    isValidAge: function (age) {
        return age > 18 && age < 60;
    }
});
Ext.define('Employee', {
    mixins: {
        greeter: 'Greeter',
        validator: 'Validator'
    },
    constructor: function (config) {
        Ext.apply(this, config);
        //here age is not declared how it would be part of Employee(this.age)
        //because of Ext.apply(this,config) now config is part of Employee
        if (this.isValidAge(this.age)) {
            this.greet();
        } else {
            console.log('Sorry you have supplied invalid input')
        }
    }
});
function App() {
    var emp = Ext.create('Employee', {
        name: 'Dhivya',
        age: 10
    });
    // Now you can call any methods or access properties
    console.log(emp.name, emp.age);     // Outputs: Dhivya
    // emp.greet();               // Outputs: Hello from mixin!

}
App()
************************************************************************************************************************************************************
										Overriding Mixins Method
******************************************************************************************************************************************************
Ext.define('Logger', {
    log: function (msg) {
        console.log('[LOG]: ' + msg);
    }
});
Ext.define('CustomLogger', {
    mixins: {
        logger: 'Logger'
    },
    // This overrides the mixin's log() method
    log: function (msg) {
        console.log('[CUSTOM LOG]: ' + msg);
    },
});
function App(){
  var customLogger =Ext.create('CustomLogger')
  customLogger.log('Hello')
}
App()
.......................................................................................................................................................................................................................................
							Methods conflict and Mixins
.......................................................................................................................................................................................................................................

How to handle multiple mixins with conflicting method names, and how to override or explicitly call a specific mixin's version.
Scenario: Two mixins with the same method name â€” log()

Ext.define('ConsoleLogger', {
    log: function (msg) {
        console.log('[Console] ' + msg);
    }
});
Ext.define('AlertLogger', {
    log: function (msg) {
        console.log('[Alert] ' + msg);
    }
});
Ext.define('LoggerUser', {
    mixins: {
        consoleLogger: 'ConsoleLogger',
        alertLogger: 'AlertLogger'
    },
    log: function (msg) {
        console.log('[Combined]' + msg)
        //call both mixins explicitly
        this.mixins.consoleLogger.log.call(this, msg + '(from Console Logger)')
        this.mixins.alertLogger.log.call(this, msg + '(from Alert Logger)')
    },
    run: function(){
        this.log('Testing Multiple mixins')
    }
})
function App() {
    var logger = Ext.create('LoggerUser');
    logger.run();
}
App()

| Behavior                       | 			What to Do                                                    
| ------------------------------ | ------------------------------------------------------------- |
| Mixins have conflicting method | Only one wins by default (last one loaded, or class override) 
| Want to call both explicitly   | Use `this.mixins.mixinName.method.call(this, args)`           
| Want to override both          | Define your own method and call mixins manually               
************************************************************************************************************************************************************						Class inheritance + mixins
.........................................................................................................................................................................................
Using class inheritance + mixins together in Ext JS â€” combining the power of OOP inheritance with reusable behaviors from mixins.

Goal:
1.Base class with a method
2.Subclass that inherits it
3.Mixins that add reusable logic
4.Subclass can override mixin or inherited method
Ext.define('LoggerMixin', {
    log: function (msg) {
        console.log('[LOG]: ' + msg);
    }
});
Ext.define('Person', {
    name: '',
    constructor: function (config) {
        Ext.apply(this, config);
        console.log('Person constructor called for ' + this.name);
    },

    sayHi: function () {
        console.log('Hi, I am ' + this.name);
    }
});
Ext.define('Employee', {
    extend: 'Person',
    mixins: {
        logger: 'LoggerMixin'
    },
    employeeId: '',

    constructor: function (config) {
        this.callParent([config]); // Call Person's constructor
        this.log('Employee created: ' + this.name + ', ID: ' + this.employeeId);
    },

    sayHi: function () {
        this.callParent(); // Call Person's sayHi
        this.log('Employee says hi too.');
    }
});
function App() {
    var emp = Ext.create('Employee',{
        employeeId: 1,
        name: 'Subramanian'
    })
    emp.sayHi()

}
App()

***********************************************************************************************************************************************************
										Coding Standards 
*********************************************************************************************************************************************************
class Declaration:

1.class Name must be noun - Employee,Person
2.Every class Namespaced
eg:
   CompanyName.ModuleName.SubModuleName.ClassName
  or
   FoderName.subFolder.subFolder.SubFolder.ClassNme

eg:
   google.invoice.payment.CreditCard
   MyApp.model.CreditCard

//instance members
Ext.define('MyApp.model.Person', {
    id: 1,
    name: 'Subrmanian Murugan',
    email: 'sasubramanan_md@hotmail.com',
    status: true,
    address: {
        city: 'Coimbatore'
    },
    skills: [
        'java', 'javascript'
    ]

})
function App() {
    var person = Ext.create('MyApp.model.Person')
    console.log(`Id : ${person.id}`)
    console.log(`Name : ${person.name}`)
    console.log(`status : ${person.status}`)
    console.log(`Id : ${person.address.city}`)
    console.log(`Skills : ${person.skills}`)
}
App()























