											Java script Fundamentals
...........................................................................................................................................................................................................................................

What is java script ?
     Java script is also the programming language.
     Java script is multi style programming language 
        -> Object based
       ->  Functional style

Object based vs Object oriented

OO Principles

1.Abstraction
2.Encapsulation
3.Typing
4.Hierachy
5.Modularity
..........................................................
6.Concurrency
7.Persistency
If any language follows the first 5 principles, those language is called object oriented language, rest of the language called object based language

 Functional style
    JavaScript was created from the language called scheme , which is pure functional programming language.

JavaScript language created for browsers in 1995 for building dynamic web pages by Netscape Communication.


After JavaScript language created, the language was submitted to standard body called  "ECMA"  international

After submission, the language was standardized and released by committee.

1.ES 1.0 -->1996
2.ES 3.0 -->1999
3.ES 4.0 -->2006
4.ES 5.0 --->2007
5.ES 6.0 --->2012-2015
6.ES 7.0 ----->2016
etc.....

We are going to focus the ES 5.0 features

JavaScript learning path(ES5):
...................................................
1.Language fundamentals
2.Functions 
3.Objects
......................................................................................................................................................................................................................................
									Language fundamentals
*********************************************************************************************************************************************************
1.Language fundamentals
 ->Variables
 ->Literals
 ->Type Systems

Project setup
G:\Tungsten>mkdir jsapps
G:\Tungsten>cd jsapps
G:\Tungsten\jsapps>
G:\Tungsten\jsapps>code .
G:\Tungsten\jsapps>mkdir src

Where we can run js code?

1.Browser
2.server - node.js

In Browser, there is embedded js runtime, which runs the js code.

Every Browser has there own runtimes to run js code

1.Chrome - V8 engine
2.Edge  - Chakra 
3.Firefox -  Spider Monkey

jsapps/src/index.js
console.log('Hello Javascript')
console.log('Welcome to javascript!')

jsapps/index.html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Javascript Apps</title>
    <script></script>
</head>

<body>
    <h1>JS Apps</h1>
    <script src="src/index.js" ></script>
</body>

</html>
........................................................................................................................................................................................................................................
										Data Types, variables, Literals
........................................................................................................................................................................................................................................

var, let, const -keywords to declare variables

 let /const - es 6 keywords
eg:
var VariableName
var firstName

2.literals -values
   strings,numbers,boolean,undefined,NaN,infinity,function,null,object

3.Data types
   Js is dynamic typed language-the type of variable is understood only during runtime.
  int a =10 - strongly typed
  let | var a =20 - dynamic typed


 literal   - type
....................
  string    - string
  number    - number
  boolean   - boolean
  undefined   - undefined
  NaN       - number
  Infinity  -  number
  function  - function
  object    - object
  null      - object


JS is dynamically typed, so type is not declared in advance, type of variables are decided during runtime, based on "literals-values"

Js has 9 literals but only 6 types.

strings,numbers,boolean,undefined,object,function- types


Strings:
//strings : "",'',``,`${}`(string interpolation)
//Strings
let firstName = "Subramanian"
let lastName = 'Murugan'
//back tick and string interpolation
let fullName = firstName + lastName // traditional 
console.log('Name' + firstName)
//back tick 
fullName = `${firstName} ${lastName}`
console.log(`Full Name ${fullName}`) // string interpoltion

//multi line strings
let doc = `
   <html>
      <head>
          <title></title>
      </head>
    <body>
    </body>
 </html>
`
console.log(doc)

Numbers:
 only type called number 
 64 bit aka double.

//numbers
let a = 10
let b = 20
let c = a + b 
console.log(`c ${c}`)

Booleans:
 true or false

//true or false 

let isValid = true
let isEnabled = false
console.log(`Valid ${isValid} Enabled ${isEnabled}`)


Undefined:
 Variable is declared without any valid value.

let price;
console.log(`Price is ${price}`)

NaN : Not a Number

NaN is number only which represents "error".
If you do any numerical computation, if computation is failed you will get NaN.
NaN is kind of "error".
if you get NaN you have to fix because is bug

NaN Use case:
if you do computation against undefined values, you get NaN.

let price;
let qty = 100;
let totalPrice = price * qty; //undefined * 100
console.log(`Total Price is ${totalPrice}`)


Infinity:
  Div/0
//infnity
let price = 100;
let avgPrice = price / 0
console.log(`Avg Price ${avgPrice}`)

..................................................................................
			Advanced Boolean
..................................................................................
What can be true or false?

decision making : if..else ,ternary operator

in JavaScript is every thing is true except the following values 

Falsy values

 * 
 *  1.boolean false
 *  2.Empty string "" ,''
 *  3.0
 *  4.undefined
 *  5.NaN
 *  6.null
 */

//advanced booleans 

let message = 'Hello'

if (message) {
    console.log(message)
} else {
    console.log('wrong')
}
message = ''
if (message) {
    console.log(message)
} else {
    console.log('wrong')
}
let myvar;
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`MyVar is ${myvar}`)
}
myvar = 0
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`MyVar is ${myvar}`)
}
myvar = false
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`MyVar is ${myvar}`)
}
....................................................................................
				Operator -Equal
.....................................................................................

== ->Double equal
=== ->Triple equal
!=
!==

let a = 10;
let b = 10;

if (a == b) {
    console.log('a and b are equal')
} else {
    console.log('a and b are not equal')
}

let x = 10;
let y = "10"

if (x == y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}


if (x === y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}
**********************************************************************************************************************************************************
											functions
**********************************************************************************************************************************************************

Declare functions:
function sayHello() {
    console.log('Hello')
}
//invoke funciton
sayHello()

params and args:
.............................
Javascript is type less. we can pass any value.

//args
function add(a, b) {
    console.log(a,b)
}
//params
add(10, 10)
add("10",10)

computation and default values
.....................................................
//args
function add(a = 0, b = 0) {
    return a + b
}
//params
console.log(add(10, 10))
console.log(add("10", 10))
console.log(add())
****************************************************************************************************************************************************
									 Functional Programming and its core principles
..............................................................................................................................................................................................................................
According to functional programming, function is just value like numbers, strings

var a=10
 
var - keyword
a - variable
10 - value /literal - number

since function is value can be assigned to a variable.
If you assign the function with variable, then that function can be called with variableName.
if you declare function with variables, without function name called "Anonymous function".

let a = 10
//hello is variable
//var is keyowrd
//function(){} - function is value
var hello = function () {
    console.log('Hello')
}
//that variable can be used to invoke that function
hello()

//anonymous function with args and return value

var multiply = function (a = 0, b = 0) {
    return a * b
}
console.log(multiply(2,5))

Higher Order function:
.....................................
How function is assigned to a variable, similarly we can pass function as parameter to another function as value and also we can return function from the another function.

Use case : Passing function as parameter : HOF

//greet = function(){}
function hello(greet) {
    greet()
}

var welcome = function () {
    console.log('welcome')
}
hello(welcome)

hello(function () {
    console.log('Hello')
})

//Higher order function with params and args

function fetchData(callback) {
    callback('Hey How are you?')
}
fetchData(function (message) {
    console.log(message)
})
***********************************************************************************************************************************************************
									 Returning function from another function - Higher order function
**********************************************************************************************************************************************************
function greet() {
    // var hello = function () {
    //     console.log('hello')
    // }
    // return hello
    return function () {
        console.log('hello')
    }
}
var res = greet()
res()
**********************************************************************************************************************************************************
											Objects
*********************************************************************************************************************************************************
How to create Object?

In class based languages, objects are created out of classes but in js Objects are created in ways

1.Constructor pattern
   Using class like construct
2.Literal Pattern
   No classes, like literals

1.Constructor pattern
   Using class like construct
 
1.1.Using functions - ES 5 Style - old style
1.2.Using classes  - ES 6 style - modern

functions:
 1. to have /to declare biz logic
 2. to declare classes 

Step 1:
 declare function with Uppercase/Noun

function Employee(){
    
}

Step 2:
 instance variables
function Employee() {
    //instance variables
    this.id = 1
    this.name = 'Subramanian'
    this.salary = 10000
}

Step 3: 
 Create instance 
//class declaration using function

function Employee() {
    //instance variables
    this.id = 1
    this.name = 'Subramanian'
    this.salary = 10000
    this.isValid = true
}

//var -keyword
//emp - is just reference variable which points object in heap
//new is keyword - memory allocation opertaor
//Employee() -  constructor call
var emp = new Employee()
console.log(emp)
console.log(emp.id,emp.name,emp.salary,emp.isValid)

...............................................................................................................................................................................................................................
											State/instance  initialization
..................................................................................................................................................................................................................................

1.inside function directly
2.inside inside constructor
3.outside function using reference variable


1.inside function directly

function Employee() {
    //instance variables
    this.id = 1
    this.name = 'Subramanian'
    this.salary = 10000
    this.isValid = true
}

2.outside function 
//class declaration using function

function Employee() {
    //instance variables
    this.id = 1
    this.name = 'Subramanian'
    this.salary = 10000
    this.isValid = true
}

//var -keyword
//emp - is just reference variable which points object in heap
//new is keyword - memory allocation opertaor
//Employee() -  constructor call
var emp = new Employee()
console.log(emp)
console.log(emp.id, emp.name, emp.salary, emp.isValid)
emp.id = 90
emp.name = 'Ram'
emp.salary = 8133
emp.isValid = true
console.log(emp.id, emp.name, emp.salary, emp.isValid)

3.Using constructors : you can initalize during object creation
//class declaration using function

//Employee is constructor function

function Employee(id = 0, name = '', salary = 0, isValid = false) {
    //instance variables
    this.id = id
    this.name = name
    this.salary = salary
    this.isValid = isValid
}

//var -keyword
//emp - is just reference variable which points object in heap
//new is keyword - memory allocation opertaor
//Employee() -  constructor call
var emp = new Employee(1,'Subramanian',123.823,true)
console.log(emp.id, emp.name, emp.salary, emp.isValid)

How to create multiple instances?

function Employee(id = 0, name = '', salary = 0, isValid = false) {
    //instance variables
    this.id = id
    this.name = name
    this.salary = salary
    this.isValid = isValid
}
var emp = new Employee(1,'Subramanian',123.823,true)
console.log(emp.id, emp.name, emp.salary, emp.isValid)

var emp1 =new Employee(3,'Ram',3333.823,true)
console.log(emp1.id, emp1.name, emp1.salary, emp1.isValid)


How to delcare methods?
function Employee(id = 0, name = '', salary = 0, isValid = false) {
    //local variables
    var noOfDays = 100
    //instance variables
    this.id = id
    this.name = name
    this.salary = salary
    this.isValid = isValid
    //instance methods
    this.getSalary = function () {
        return this.salary * noOfDays
    }
}
var emp = new Employee(1, 'Subramanian', 100, true)
console.log(emp.id, emp.name, emp.getSalary(), emp.isValid)
********************************************************************************************************************************************************
										literal pattern
*********************************************************************************************************************************************************
No class(function), objects are created out of literal syntax.
//var is keyword
//emp is just variable  which points object reference
var emp = {
    id: 1,
    name: 'Subramanian',
    status: true
}
console.log(emp)
console.log(emp.id,emp.name,emp.status)

literal methods:
......................
var emp = {
    id: 1,
    name: 'Subramanian',
    status: true,
    calculate: function (value = 0) {
        return value
    }
}
console.log(emp)
console.log(emp.id, emp.name, emp.status, emp.calculate(12323))

Nested Objects  (has-a)
.......................................
//has a
function Employee(id = 0, name = '', salary = 0, isValid = false, address) {
    //local variables
    var noOfDays = 100
    //instance variables
    this.id = id
    this.name = name
    this.salary = salary
    this.isValid = isValid
    //has -a
    this.address = address
    //instance methods
    this.getSalary = function () {
        return this.salary * noOfDays
    }
}
function Address(city = "", state = "") {
    this.city = city
    this.state = state
}
let emp = new Employee(1, "Subramnaian", 22323.89, true, new Address('Coimbatore', 'TamilNadue'))
console.log(emp.id, emp.name, emp.address.city, emp.address.state)

Literal has-a:
....................
var emp = {
    id: 1,
    name: 'Subramanian',
    status: true,
    //has-a
    address: {
        state:'Tamil Nadu',
        city:'Coimbatore'
    }
}
console.log(emp.id, emp.name, emp.address.city, emp.address.state)
***********************************************************************************************************************************************************




				




